name: CET6 Daily Checkin Automation
on:
  schedule:
    - cron: '0 20 * * *'  # UTC时间20:00 = 北京时间次日4:00
  workflow_dispatch: {}

permissions:
  issues: write
  repository-projects: write
  contents: write 

jobs:
  create-checkin-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Create Daily Checkin Issue
        uses: actions/github-script@v6
        with:
          script: |
            const { graphql } = github
            try {
              // 1. 获取北京时间
              const now = new Date()
              const chinaTime = new Date(now.getTime() + (8 * 60 * 60 * 1000)) // UTC+8
              const chinaDate = chinaTime.toISOString().split('T')[0]
              const fullDateTime = chinaTime.toISOString() // 带时区的完整格式

              // 2. 创建Issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[CET6打卡] ${chinaDate}`,
                body: '请填写今日CET6进展：\n- [ ] 背单词\n- [ ] 听听力\n- [ ] 做真题',
                assignees: ['CuT-Shade'],
                labels: ['@6-提升计划'],
                milestone: 6
              })

              console.log('Issue created successfully:', issue.data.number)

              // 3. 获取用户级别的项目ID
              const projectsQuery = await github.graphql(`
                query {
                  user(login: "CuT-Shade") {
                    projectV2(number: 1) {
                      id
                      title
                    }
                  }
                }
              `);

              console.log('Projects query result:', JSON.stringify(projectsQuery, null, 2))

              const projectId = projectsQuery.user.projectV2.id
              console.log('Selected project ID:', projectId)

              // 4. 添加到Project并获取item ID
              const addToProjectResult = await graphql(`
                mutation {
                  addProjectV2ItemById(input: {
                    projectId: "${projectId}",
                    contentId: "${issue.data.node_id}"
                  }) {
                    item {
                      id
                    }
                  }
                }
              `)

              console.log('Add to project result:', JSON.stringify(addToProjectResult, null, 2))

              const itemId = addToProjectResult.addProjectV2ItemById.item.id
              console.log('Item ID:', itemId)

              // 5. 更新自定义日期字段
              const updateResult = await graphql(`
                mutation {
                  setStartDate: updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}"
                    itemId: "${itemId}"
                    fieldId: "PVTSSF_205924339"  # Start date字段ID
                    value: { date: "${chinaDate}" }
                  }) { clientMutationId }
                  
                  setEndDate: updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}"
                    itemId: "${itemId}"
                    fieldId: "PVTSSF_205924340"  # End date字段ID
                    value: { date: "${chinaDate}" }
                  }) { clientMutationId }
                }
              `)

              console.log('Update fields result:', JSON.stringify(updateResult, null, 2))

            } catch (error) {
              console.error('Error details:', {
                message: error.message,
                stack: error.stack,
                data: error.data
              })
              core.setFailed(`Workflow failed: ${error.message}`)
            }
