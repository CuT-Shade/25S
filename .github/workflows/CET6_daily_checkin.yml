name: CET6 Daily Checkin Automation

on:
  schedule:
    - cron: '0 20 * * *'  # UTC时间20:00 = 北京时间次日4:00
  workflow_dispatch: {}

permissions:
  issues: write
  repository-projects: write
  contents: write 

jobs:
  create-checkin-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Create Daily Checkin Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { graphql } = github;
            try {
              // 1. 获取北京时间
              const now = new Date();
              const chinaTime = new Date(now.getTime() + (8 * 60 * 60 * 1000)); // UTC+8
              const chinaDate = chinaTime.toISOString().split('T')[0];

              // 2. 创建带有父级 issue 引用的 Issue
              const issueBody = [
                'parent: #9',
                '',
                '请填写今日CET6进展：',
                '- [ ] 背单词',
                '- [ ] 听听力',
                '- [ ] 做真题',
                '',
                `> 本条目是自动创建的每日打卡任务，父任务为 [EN-Review #9](${context.repo.owner}/${context.repo.repo}/issues/9)`
              ].join('\n');

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[CET6打卡] ${chinaDate}`,
                body: issueBody,
                assignees: ['CuT-Shade'],
                labels: ['@6-提升计划'],
                milestone: 6
              });

              console.log('Issue created successfully:', issue.data.number);

              // 在父 issue #9 中添加任务项
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: 9, // 父 issue 编号
                body: `- [ ] ${issue.data.title} #${issue.data.number}`
              });

              // 3. 获取项目ID、状态字段和选项
              const projectQuery = await graphql(`
                query($login: String!, $number: Int!) {
                  user(login: $login) {
                    projectV2(number: $number) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2FieldCommon {
                            id
                            name
                            dataType
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                login: 'CuT-Shade',
                number: 1
              });

              const projectId = projectQuery.user.projectV2.id;
              console.log('Project ID:', projectId);

              // 找到字段的ID
              const fields = projectQuery.user.projectV2.fields.nodes;
              console.log('Available fields:', fields.map(f => ({
                id: f.id,
                name: f.name,
                dataType: f.dataType,
                options: f.options
              })));

              // 4. 添加到Project并获取item ID
              const addToProjectResult = await graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId,
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId: projectId,
                contentId: issue.data.node_id
              });

              const itemId = addToProjectResult.addProjectV2ItemById.item.id;
              console.log('Item ID:', itemId);

              // 5. 更新状态字段
              const statusField = fields.find(f => f.name === 'Status');
              if (statusField && statusField.options) {
                const todoOption = statusField.options.find(o => o.name.toLowerCase() === 'todo');
                if (todoOption) {
                  const updateStatusResult = await graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: { 
                          singleSelectOptionId: $optionId
                        }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `, {
                    projectId: projectId,
                    itemId: itemId,
                    fieldId: statusField.id,
                    optionId: todoOption.id
                  });
                  console.log('Update status result:', JSON.stringify(updateStatusResult, null, 2));
                }
              }

              // 6. 找到并更新日期字段
              const startDateField = fields.find(f => f.name.toLowerCase().includes('start') && f.dataType === 'DATE');
              const endDateField = fields.find(f => f.name.toLowerCase().includes('end') && f.dataType === 'DATE');

              if (startDateField && endDateField) {
                const updateResult = await graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $date: Date!) {
                    setStartDate: updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: "${startDateField.id}"
                      value: { date: $date }
                    }) { clientMutationId }
                    
                    setEndDate: updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: "${endDateField.id}"
                      value: { date: $date }
                    }) { clientMutationId }
                  }
                `, {
                  projectId: projectId,
                  itemId: itemId,
                  date: chinaDate
                });

                console.log('Update fields result:', JSON.stringify(updateResult, null, 2));
              } else {
                console.log('Date fields not found. Available fields:', fields);
              }

            } catch (error) {
              console.error('Error details:', {
                message: error.message,
                stack: error.stack,
                data: error.data
              });
              core.setFailed(`Workflow failed: ${error.message}`);
            }
